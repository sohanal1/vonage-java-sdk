plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "com.github.ben-manes.versions" version '0.51.0'
}

group = "com.vonage.onespan"
archivesBaseName = "server-sdk-oss"
version = "8.7.1"

ext.githubPath = 'Vonage/vonage-java-sdk'

repositories {
    mavenCentral()
}

dependencies {
    def jacksonVersion = '2.17.1'
    def httpclientVersion = '4.5.14'
    def junitVersion = '5.11.0-M2'

    implementation 'commons-codec:commons-codec:1.17.0'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation "org.apache.httpcomponents:httpclient:$httpclientVersion"
    implementation "org.apache.httpcomponents:httpmime:$httpclientVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    implementation "com.vonage:jwt:1.1.1"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'jakarta.servlet:jakarta.servlet-api:4.0.4'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = sourceCompatibility
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = sourceCompatibility
    options.compilerArgs += '--enable-preview'
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:all', '-quiet')
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
    jvmArgs "--enable-preview"
}

javadoc {
    title "Vonage Java Server SDK"
    // uncomment this to use a custom javadoc overview
    //options.overview = file("src/main/javadoc/overview.html")
    // uncomment this to use the custom javadoc styles
    //options.stylesheetFile = file("src/main/javadoc/css/styles.css")
    //exclude "..."
    options.linkSource = true
}

jar {
    manifest {
        attributes(
                'Created-By': 'Vonage',
                'Implementation-Vendor': 'Vonage',
                'Implementation-Title': 'Vonage Java Server SDK',
                'Implementation-Version': archiveVersion
        )
    }
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from javadoc
}
assemble.dependsOn javadocJar

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jacocoTestReport {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
}
check.dependsOn jacocoTestReport

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {

            url "https://git.onespan.com/api/v4/projects/32381/packages/maven"

            credentials(HttpHeaderCredentials) {
                name = System.getenv("CI_JOB_TOKEN") ? "Job-Token" : "Private-Token"
                value = System.getenv("CI_JOB_TOKEN") ? System.getenv("CI_JOB_TOKEN") : gitLabPrivateToken
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
            content {
                includeGroupByRegex "com\\.onespan.*"
            }
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
 //   sign publishing.publications.mavenJava
}
